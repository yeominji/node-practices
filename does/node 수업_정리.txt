1. 패키지(package)
   - 완전한 애플리케이션 ex) devtools(nodeamon, babel, webpack...)
   - 코드 샘플, 프로젝트에서 사용하는 모듈(라이브러리) 
2. 의존성(Dependency)
   - 개발하고 있는 프로젝트(패키지, 애플리케이션)에서 설치하고 사용하는
     다른 패키지
   - 1) 일반 의존성: 개발하고 있는 애플리케이션에서 사용하는 패키지로 배포에 꼭 포함.
         $ npm i ...  

   - 2) 개발 의존성: 개발에 필요하거나 도움이 되는 패키지(dev tool) 패키지에 포함 안되어 된다.
         $ npm i -D ...

3. 패키지 설치 방식
   1) 전역(global) 설치: 여러 프로젝트에서 공통으로 사용하는 도구들 설치
      $ npm i -g ...  
   2) 지역(project local) 설치:	특정 프로젝트에만 종속 적인 도구나 라이브러리
      $ npm i ...  

패키치 설치
[project-ex01] $ npm i ejs          (local install, general dependency) 
[project-ex01] $ npm i -D nodeamon  (local install, developement Dependency)
[project-ex01] $ npm i -g gulp      (global install)

패키치 삭제
[project-ex01] $ npm un ejs      (local install 삭제) 
[project-ex01] $ npm un -g gulp  (global install 삭제)

Node(JavaSctipt) Project (Application, Package) 생성
1. 프로젝트 디렉토리를 생성      (mkdir)
2. 프로젝트 디렉토리로 이동      (cd)
3. [project-ex01] $ npm init -y  (프로젝트 매니페스트 파일(package.json) 생성, 프로젝트 초기화)      

============================================
모듈:
1. 코어모듈(fs, os, ... node에서 제공해주는 모듈)
2. 파일모듈: 파일의 경로로 불러와서 모듈안의 객체, 함수, 클래스를 사용한다.
3. npm모듈: npm을 통해서 node_modules에 설치해서 사용하는 모듈
   패키지 설치 방법: 1. 로컬 배포
                     2. 원격 배포    

============================================
npmjs.com npm registry에 패키지 배포하기.
1. 사용자 등록
$ npm adduser
Username: douzone-busan-bitacademy
Password:
Email: douzone.busan.bitacademy@gmail.com
Logged....
2. 업로드
[douzone-busan-bitacademy]$ npm publish

============================================
맨바닥에서 웹애플리케이션 만들어보기
helloweb-ex01
app01. based on http : core module
app02. based on (http, fs) : core module
app03. based on (connect, serve-static) : npm package(module)
app04. based on (connect, serve-static, connect-route) : npm package(module)

=========================================================
helloweb-ex02 based on express : npm package(module)
[helloweb-ex02] npm init -y

[helloweb-ex02] npm i express
[helloweb-ex02] npm i ejs
[helloweb-ex02] npm i -D nodemon

package.json 스크립트 수정
  "scripts": {
    "start": "node index.js",
    "debug": "nodemon index.js"
  }

[helloweb-ex02] npm start     (운용시...) 
[helloweb-ex02] npm run debug (개발시...Live Update)

[helloweb-ex02] mkdir public
[helloweb-ex02] mkdir views
[helloweb-ex02] mkdir routes
[helloweb-ex02] mkdir controllers
[helloweb-ex02] mkdir models

=========================================================
emaillist (models based mysql) - 기본 sql 기반

[emaillist] npm init -y

[emaillist] npm i express
[emaillist] npm i ejs
[emaillist] npm i mysql
[emaillist] npm i -D nodemon

package.json 스크립트 수정
  "scripts": {
    "start": "node index.js",
    "debug": "nodemon index.js"
  }

[emaillist] npm start     (운용시...) 
[emaillist] npm run debug (개발시...Live Update)

[emaillist] mkdir routes
[emaillist] mkdir controllers
[emaillist] mkdir models
[emaillist] mkdir views
[emaillist] mkdir public


=======================================================
guestbook (models based mysql) - 기본 sql 기반

[guestbook] npm init -y

[guestbook] npm i express
[guestbook] npm i ejs
[guestbook] npm i mysql
[guestbook] npm i -D nodemon

package.json 스크립트 수정
  "scripts": {
    "start": "node index.js",
    "debug": "nodemon index.js"
  }

[guestbook] npm start     (운용시...) 
[guestbook] npm run debug (개발시...Live Update)

[guestbook] mkdir routes
[guestbook] mkdir controllers
[guestbook] mkdir models
[guestbook] mkdir views
[emaillist] mkdir public

index.js 작성

=======================================================
mysite (models based on Sequelize) ORM

1. orm(Sequelize) -> JS test
2. user(session, 인증, 접근제어), jQuery(ajax) + Node API
3. views -> include(ejs)
4. dotenv(configuration: DB Connection Info, port, static directory)
5. log(winston)
6. fileupload(multer)